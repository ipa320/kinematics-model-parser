#!/usr/bin/env python3

import sys
import xml.dom.minidom

import rospy
import xacro


class Robot(object):
    def __init__(self, name, version=''):
        self.version = version
        self.name = name
        self.macros = list()
        self.body = None

    def add_macro(self, m):
        self.macros.append(m)

    def dump_xtext(self, indent='', level=1):
        xtext_str = 'Robot { name ' + self.name
        if len(self.macros) > 0:
            xtext_str += '\n' + indent * level + 'macro {'
            for macro in self.macros:
                xtext_str += macro.dump_xtext(indent, level+1)
        xtext_str = xtext_str[:-1] + ' } }'
        return xtext_str


class Macro(object):
    def __init__(self, name):
        self.name = name
        self.body = None
        self.params = dict()

    def add_param(self, p_name, p_type):
        self.params.update({p_name, p_type})

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'Macro { name ' + self.name
        if len(self.params) > 0:
            xtext_str += '\n' + indent * (level+1) + 'parameter {'
            for param in self.params.keys():
                pass
                xtext_str += '\n' + indent * (level+2) + 'Parameter ' + \
                    param + ' { type '  + self.params[param] + ' },'
            xtext_str = xtext_str[:-1] + ' }'
        xtext_str += self.body.dump_xtext(indent, level+1) + ' },'
        return xtext_str


class Origin(object):
    def __init__(self):
        self.rpy = ''
        self.xyz = ''
        self.ref = ''

    def dump_xtext(self, indent='', level=1):
        return '\n' + indent*level + 'origin Pose { rpy "' + self.rpy + \
             '" xyz "' + self.xyz + '" }'


class Limit(object):
    def __init__(self):
        self.effort = ''
        self.velocity = ''
        self.lower = ''
        self.upper = ''

    def dump_xtext(self, indent='', level=1):
        return '\n' + indent*level + 'limit Limit { effort "' + self.effort + \
            '" lower "' + self.lower + '" upper "' + self.upper + \
            '" velocity "' + self.velocity + '" }'


class Mesh(object):
    def __init__(self):
        self.filename = ''

    def dump_xtext(self, indent='', level=1):
        return '\n' + indent*level + 'mesh Mesh { filename "' + \
            self.filename + '" }'


class Cylinder(object):
    def __init__(self):
        self.radius = ''
        self.length = ''

    def dump_xtext(self, indent='', level=1):
        return '\n' + indent*level + 'cylinder Cylinder { length ' \
            + self.length + ' radius ' + self.radius + ' }'


class Geometry(object):
    def __init__(self):
        self.mesh = None
        self.cylinder = None

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'geometry Geometry {'
        if self.mesh:
            xtext_str += self.mesh.dump_xtext(indent, level+1)
        elif self.cylinder:
            xtext_str += self.cylinder.dump_xtext(indent, level+1)
        xtext_str += ' }'

        return xtext_str


class Mass(object):
    def __init__(self):
        self.value = ''

    def dump_xtext(self, indent='', level=1):
        return '\n' + indent*level + 'mass Mass { value ' + self.value + ' }'


class Inertia(object):
    def __init__(self):
        self.ixx = ''
        self.ixy = ''
        self.ixz = ''
        self.iyy = ''
        self.iyz = ''
        self.izz = ''

    def dump_xtext(self, indent='', level=1):
        return '\n' + indent*level + 'inertia Inertia {' + \
            ' ixx ' + str(self.ixx) + \
            ' ixy ' + str(self.ixy) + \
            ' ixz ' + str(self.ixz) + \
            ' iyy ' + str(self.iyy) + \
            ' iyz ' + str(self.iyz) + \
            ' izz ' + str(self.izz) + ' }'


class Inertial(object):
    def __init__(self):
        self.mass = None
        self.origin = None
        self.inertia = None

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'inertial Inertial { '
        if self.origin:
            if type(self.origin) == str:
                xtext_str += '\n' + indent*(level+1) + 'origin "' + self.origin + '"'
            else:
                xtext_str += self.origin.dump_xtext(indent, level+1)
        if self.mass:
            xtext_str += self.mass.dump_xtext(indent, level+1)
        if self.inertia:
            xtext_str += self.inertia.dump_xtext(indent, level+1)
        xtext_str += ' }'

        return xtext_str


class Visual(object):
    def __init__(self):
        self.name = ''
        self.geometry = None
        self.origin = None

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'visual Visual {'
        if self.origin:
            xtext_str += self.origin.dump_xtext(indent, level+1)
        if self.geometry:
            xtext_str += self.geometry.dump_xtext(indent, level+1)
        xtext_str += ' }'

        return xtext_str


class Collision(object):
    def __init__(self):
        self.name = ''
        self.geometry = None
        self.origin = None

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'collision Collision {'
        if self.origin:
            xtext_str += self.origin.dump_xtext(indent, level+1)
        if self.geometry:
            xtext_str += self.geometry.dump_xtext(indent, level+1)
        xtext_str += ' }'

        return xtext_str


class Link(object):
    def __init__(self):
        self.name = ''
        self.visual = None
        self.collision = None
        self.inertial = None

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'Link { name ' + \
            format_name(self.name)
        if self.inertial:
            xtext_str += self.inertial.dump_xtext(indent, level+1)
        if self.visual:
            xtext_str += self.visual.dump_xtext(indent, level+1)
        if self.collision:
            xtext_str += self.collision.dump_xtext(indent, level+1)
        xtext_str += ' },'

        return xtext_str


class Joint(object):
    def __init__(self):
        self.name = ''
        self.type = ''
        self.parent = ''
        self.child = ''
        self.origin = None
        self.axis = ''
        self.limit = None

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'Joint { name ' + \
            format_name(self.name) + ' type ' + self.type + \
            '\n' + indent*(level+1) + 'parent ' + format_name(self.parent) + \
            '\n' + indent*(level+1) + 'child ' + format_name(self.child)
        if self.origin:
            xtext_str += self.origin.dump_xtext(indent, level+1)
        if self.axis:
            xtext_str += '\n' + indent*(level+1) + 'axis Vector3 { xyz "' + \
                self.axis + '" }'
        if self.limit:
            xtext_str += self.limit.dump_xtext(indent, level+1)
        xtext_str += ' },'

        return xtext_str


class Body(object):
    def __init__(self):
        self.links = list()
        self.joints = list()
        self.property = xacro.Table()

        # macro body can have any element
        self.geometry = None
        self.inertial = None

    def add_link(self, link):
        self.links.append(link)

    def add_joint(self, joint):
        self.joints.append(joint)

    def dump_xtext(self, indent='', level=1):
        xtext_str = '\n' + indent*level + 'body Body {'
        if len(self.links) > 0:
            xtext_str += '\n' + indent*(level+1) + 'link {'
            for link in self.links:
                xtext_str += link.dump_xtext(indent, level+2)
            xtext_str = xtext_str[:-1] + ' }'
        if len(self.joints) > 0:
            xtext_str += '\n' + indent*(level+1) + 'joint {'
            for joint in self.joints:
                xtext_str += joint.dump_xtext(indent, level+2)
            xtext_str = xtext_str[:-1] + ' }'
        if self.geometry:
            xtext_str += self.geometry.dump_xtext(indent, level+2)
            xtext_str = xtext_str[:-1] + '}'
        if self.inertial:
            xtext_str += self.inertial.dump_xtext(indent, level+2)
            xtext_str = xtext_str[:-1] + '}'

        xtext_str += ' }'
        return xtext_str


class XacroStr(str):
    def set_keyword(self, keyword=''):
        self.keyword = keyword

    def dump_xtext(self, indent='', level=1):
        return '\n' + indent * level + self.keyword + ' "' + self + '"'


def get_xacro_str(ref_name, keyword):
    xacroStr = XacroStr(ref_name)
    xacroStr.set_keyword(keyword)
    return xacroStr


def identify_param_type(elem, params):
    param_types = {}
    if isinstance(elem, Link) or isinstance(elem, Joint):
        for p in params:
            if p in elem.name:
                param_types[p] = 'String'
                params.remove(p)

    if isinstance(elem, Joint):
        for p in params:
            if p in elem.parent or p in elem.child:
                param_types[p] = 'LinkRef'
                params.remove(p)

    return param_types


def format_ref_link(link, params):
    link = format_name(link)
    link = link.replace('"', '')

    if link in params.keys():
        return link

    return '"' + link + '"'


def format_name(name, symbols=None):
    try:
        name = xacro.unicode(xacro.eval_text(name, symbols))
        print('data: ' + data)
    except Exception as e:
        while '${' in name:
            start = name.rfind('${')
            if start != -1:
                end = name[start:].rfind('}')
                param = name[start+2:start+end]
                name = name[:start] + '"' +  param + '"' + name[start+end+1:]

    return name


def handle_macros(parent, node, name, macros):
    if name in macros.keys():
        node = macros[name].body.firstChild
        while node.nodeType != xml.dom.Node.ELEMENT_NODE:
            node = node.nextSibling

        setattr(parent, node.tagName, get_xacro_str(name, node.tagName))
        return True
    return False


# recursively traverses the xacro instance and
# creates corresponding kinematics instances
def parse_elem(node, parent, symbols, params, macros):
    node = node.firstChild
    elem = None
    while node:
        next = node.nextSibling
        if node.nodeType == xml.dom.Node.ELEMENT_NODE:
            tagName = node.tagName.replace('xacro:', '')
            if tagName == 'insert_block':
                name, = xacro.check_attrs(node, ['name'], [])

                # Assuming '*' is origin block. Better solution?
                if ("*" + name) in params and hasattr(parent, 'origin'):
                    setattr(parent, 'origin', get_xacro_str(name, 'origin'))

            elif hasattr(parent, tagName):
                # print(str(parent) + ' ' + tagName)
                if isinstance(getattr(parent, tagName), str):
                    for name, value in node.attributes.items():
                        setattr(parent, node.tagName, format_name(value))
                elif tagName == 'property':
                    xacro.grab_property(node, symbols)
                # elif handle_macros(parent, node, tagName, macro_names):
                #     pass
                else:
                    try:
                        # create an object of type node.tagName
                        # e.g. is tag name is 'visual', create object
                        # of type Visual
                        # the parent has an attribute of this type
                        cls = globals()[node.tagName.capitalize()]
                        elem = cls()
                        for name, value in node.attributes.items():
                            setattr(elem, name, format_name(value, symbols))
                        setattr(parent, node.tagName, elem)
                    except Exception as e:
                        print(e)
                        return
            elif handle_macros(parent, node, tagName, macros):
                pass

            else:
                try:
                    # create an object of type node.tagName
                    # e.g. is tag name is 'link', create object of type Link
                    # the parent usually maintains a list in this case 'links'
                    cls = globals()[node.tagName.capitalize()]
                    elem = cls()
                    for name, value in node.attributes.items():
                        setattr(elem, name, format_name(value))
                    func = getattr(parent, 'add_' + node.tagName)
                    func(elem)
                except Exception as e:
                    print(e)
                    return

        parse_elem(node, elem, symbols, params, macros)
        node = next


def parse_macros(macros, symbols):
    robot = Robot('dummy')

    for name in macros:
        m = macros[name]

        macro = Macro(name)
        m_params = {}

        body = Body()
        parse_elem(m.body, body, symbols, m.params, macros)

        if len(body.links) > 0:
            for link in body.links:
                param_types = identify_param_type(link, m.params)
                m_params.update(param_types)
        if len(body.joints) > 0:
            for joint in body.joints:
                param_types = identify_param_type(joint, m.params)
                m_params.update(param_types)

        for joint in body.joints:
            joint.parent = format_ref_link(joint.parent, m_params)
            joint.child = format_ref_link(joint.child, m_params)

        macro.body = body
        macro.params.update(m_params)
        robot.add_macro(macro)

    print(robot.dump_xtext('  '))

    return robot


def process_file(input_file_name, **kwargs):
    """main processing pipeline"""
    # initialize file stack for error-reporting
    xacro.init_stacks(input_file_name)
    # parse the document into a xml.dom tree
    doc = xacro.parse(None, input_file_name)
    # perform macro replacement
    macros, symbols = process_doc(doc, **kwargs)

    # parse URDF elements -- joints, links, etc
    robot = parse_macros(macros, symbols)

    name = input_file_name.split('/')[-1].split('.')[0]

    return doc


def process_doc(doc, mappings=None, **kwargs):
    global verbosity
    verbosity = kwargs.get('verbosity', xacro.verbosity)

    # set substitution args
    xacro.substitution_args_context['arg'] = {} if mappings is None \
        else mappings

    # if not yet defined: initialize filestack
    if not xacro.filestack:
        xacro.init_stacks(None)

    macros = xacro.Table()
    symbols = xacro.Table(xacro._global_symbols)

    # apply xacro:targetNamespace as global xmlns (if defined)
    targetNS = doc.documentElement.getAttribute('xacro:targetNamespace')
    if targetNS:
        doc.documentElement.removeAttribute('xacro:targetNamespace')
        doc.documentElement.setAttribute('xmlns', targetNS)

    xacro.eval_all(doc.documentElement, macros, symbols)

    # reset substitution args
    xacro.substitution_args_context['arg'] = {}

    return macros, symbols


if __name__ == "__main__":
    opts, input_file_name = xacro.process_args(sys.argv[1:])
    try:
        # open and process file
        doc = process_file(input_file_name, **vars(opts))
        # print()

    # error handling
    except xml.parsers.expat.ExpatError as e:
        xacro.error("XML parsing error: %s" % unicode(e), alt_text=None)
        if xacro.verbosity > 0:
            xacro.print_location()
            print(file=sys.stderr)  # add empty separator line before error
            print("Check that:", file=sys.stderr)
            print(" - Your XML is well-formed", file=sys.stderr)
            print(" - You have the xacro xmlns declaration:",
                  "xmlns:xacro=\"http://www.ros.org/wiki/xacro\"",
                  file=sys.stderr)
        sys.exit(2)  # indicate failure,
                     # but don't print stack trace on XML errors

    except Exception as e:
        msg = xacro.unicode(e)
        if not msg:
            msg = repr(e)
        xacro.error(msg)
        if xacro.verbosity > 0:
            xacro.print_location()
        if xacro.verbosity > 1:
            print(file=sys.stderr)  # add empty separator line before error
            raise  # create stack trace
        else:
            sys.exit(2)  # gracefully exit with error condition